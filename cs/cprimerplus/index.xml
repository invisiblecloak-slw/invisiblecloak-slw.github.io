<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>《C Primer Plus》 on XIU</title>
    <link>https://qidi.ink/cs/cprimerplus/</link>
    <description>Recent content in 《C Primer Plus》 on XIU</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://qidi.ink/cs/cprimerplus/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>第4章 字符串和格式化输入/输出</title>
      <link>https://qidi.ink/cs/cprimerplus/4/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://qidi.ink/cs/cprimerplus/4/</guid>
      <description>字符串  字符串是一系列被视为一个处理单元的字符，以双引号标识。  char类型数组和null字符  C语言没有专门用于存储字符串的变量类型。字符串存储在char类型数组中。  数组是同类型数据元素的有序序列。字符串中的字符被存储在相邻的存储单元中，每个单元存储一个字符。   C语言用空字符\0标记字符串的结束。  空字符是一种非打印字符，不是数字0，其ASCII码为0。 字符串字符串是一种派生类型（char数组）。字符是一种基本类型。  常量&amp;quot;x&amp;quot;和字符常量&#39;x&#39;不同。&amp;quot;x&amp;quot;实际上由两个字符组成：&#39;x&#39;和空字符\0。   C语言中的字符串一定以空字符结束，从而用于存储字符串的字符数组的容量必须至少比待存储字符串中的字符数多1。   sizeof运算符以字节为单位给出数组的大小。  sizeof是否使用圆括号取决于运算对象是类型还是特定量。  运算对象是类型时，圆括号必不可少。如sizeof(char)。 运算对象是特定量时，圆括号可以不加。如sizeof name或sizeof(name)。     头文件string.h中的函数strlen()给出字符串中的字符长度。 C99和C11标准为sizeof运算符的返回类型添加了%zd转换说明，这对于strlen()同样适用。  对于早期的C，需要知道sizeof和strlen()返回的实际类型。通常是unsigned或unsigned long。    常量和C预处理器  在K&amp;amp;R合著的The C Programming Language中介绍过符号常量的概念。 历年C标准中，提及#define的用法之一是定义一个明示常量。 C语言中可以借助C预处理器定义明示常量。  通用格式为#define NAME value。  NAME和value之间没有等号，语句末尾也没有分号。 NAME全大写是C的一贯传统，提高了程序的可读性。 value也可以是字符和字符串常量。   编译程序时，程序中的所有明示常量NAME都会被值value替代。这一过程称为编译时替换。 符号常量的命名规则与变量相同。可以使用大小写字母、数字和下划线，但首字符不能是数字。 符号常量提高了程序的可读性和可维护性。   C90标准新增了const关键字，用于限定一个变量为只读。  const int MONTHS = 12; const关键字使得MONTHS成为一个只读值。即可以在计算中使用MONTHS，可以打印MONTHS，但是不能够更改MONTHS的值。    明示常量</description>
    </item>
    
    <item>
      <title>第3章 数据和C</title>
      <link>https://qidi.ink/cs/cprimerplus/3-c/</link>
      <pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://qidi.ink/cs/cprimerplus/3-c/</guid>
      <description>程序离不开数据。程序利用数字、字母和文字等数据完成某些任务。
变量与常量数据  数据是承载信息的数字和字符。 在程序运行过程中没有发生变化的量称为常量。 在程序运行过程中可能会改变或被赋值的量称为变量。  数据类型关键字  C语言通过识别数据类型来区分和使用不同的数据。 常量数据一般通过用户书写的形式识别。变量则是在声明时指定其类型。 K&amp;amp;R C最初给定了七个与类型相关的关键字int、long、short、unsigned、char、float、double。 C90标准添加了关键字signed和void。 C99标准添加了关键字_Bool、_Complex和_Imaginary。 C语言中，用int关键字表示基本的整数类型。  关键字long、short、unsigned和signed用于提供基本整数类型的变式。如unsigned short int和long long int。   C语言中，用char关键字指定字母和其它字符。也可用char类型表示较小的数。 C语言中，用float、double和long double表示带小数点的数。 C语言中，_Bool类型表示布尔值，_Complex和_Imaginary分别表示复数和虚数。 通过上述关键字创建的类型，按照计算机的存储方式可以分为两大基本类型：整数类型和浮点数类型。 在某些系统化的命名约定中，在变量名中体现出变量的类型。  用i_前缀表示int类型。如i_smart。 用us_前缀表示unsigned short类型。如us_versmart。    位、字节、字  位、字节、字用于描述计算机数据单元或存储单元，主要指存储单元。 位是计算机内存的基本构建块，计算机中位的数量十分庞大。位用于设置开或关。 字节是常用的计算机存储单位。在字节的标准定义中，1字节为8位。 字是设计计算机时给定的自然存储单位。计算机的字长越大，其数据转移越快，允许的内存访问也越多。  整数  C语言中，整数是没有小数部分的数。计算机以二进制数字存储整数。  int类型  int类型是有符号整型，取值范围依系统而异。  一般而言，存储一个int要占用一个机器字长。 ISO C规定int的最小取值范围为-32768 ~ 32768。 系统用一个特殊位的值表示有符号整数的正负号。 int类型被认为是计算机处理整数类型时最高效的类型。    其它整数类型  C语言提供三个附属关键字修饰基本整数类型：short、long和unsigned。  short int类型或short占用的存储空间可能比int类型少，常用于较小数值的场合以节省空间。  C语言规定short类型至少占16位。 在给函数传递参数时，C编译器会把short类型的值自动转换成int类型的值。   long int或long占用的存储空间可能比int类型多，适用于较大数值的场合。  C语言规定long类型至少占32位。   long long int或long long（C99加入）占用的存储空间可能比long多，适用于更大数值的场合。long long类型至少占64位。  C语言规定long long类型至少占64位。   unsigned int或unsigned用于表达非负值。  unsigned类型中，用于表示正负号的位现用于表示另一个二进制位，故无符号整型可以表示更大的数。   C语言只规定short占用的存储空间不能多于int，long占用的存储空间不能少于int。  即C语言只规定了基本数据类型的最小取值范围。 这种规定是为了适应不同的机器。 在运行Windows 3.</description>
    </item>
    
    <item>
      <title>第2章 C语言概述</title>
      <link>https://qidi.ink/cs/cprimerplus/2-c/</link>
      <pubDate>Sun, 25 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://qidi.ink/cs/cprimerplus/2-c/</guid>
      <description>程序可看作希望计算机如何完成任务的描述。 编译器负责将程序转换为机器语言。 由于编译器不具有真正的智能，因此必须用编译器能理解的特定格式的指令表达意图。这些特定格式的指令就是C语言标准规定的形式规则。 编写C程序即是在符合C标准的编译器框架下，表达程序如何完成任务的想法。  demo #include&amp;lt;stdio.h&amp;gt;int main(void) { int num; num = 1; printf(&amp;#34;I am a simple &amp;#34;); printf(&amp;#34;computer.\n&amp;#34;); printf(&amp;#34;My favorite number is %d because it is first.\n&amp;#34;, num); return 0 }  C程序由一个或多个函数组成，必须有main()函数。  函数由函数头和函数体组成。  函数头包含函数名、传入该函数的信息类型和函数的返回类型。 函数体被花括号扩起来，由一系列语句、声明组成。   通过函数名后的圆括号可识别出函数。  圆括号内可能为空，可能有参数。     C语言中有关键字、标识符、运算符、数据。 C语言中有六种语句：标号语句、复合语句、表达式语句、选择语句、迭代语句·、跳转语句。  C语言中的函数调用是一种后缀表达式语句。    解释 #include指令和头文件  #include&amp;lt;stdio.h&amp;gt;是一种拷贝-粘贴的操作。相当于将stdio.h文件中的所有内容都输入到该行所在的位置。 标准输入输出头文件stdio.h是C编译器软件包的标准部分，提供键盘输入和键盘输出的支持。  在C程序顶部的信息被称为头文件。 头文件包含了编译器创建最终可执行程序要用到的信息。 不将输入和输出作为语言内置功能体现了C语言经济实用资源的原则，这种原则使得C语言成为流行的嵌入式编程语言。   #include&amp;lt;stdio.h&amp;gt;是一条预处理指令。  C编译器在变异之前会对源代码做一些准备工作，称为预处理。    main()函数  函数是C程序的基本模块。圆括号用于对函数的标识。 C程序从**main()**函数开始执行。  C编译器允许main()没有参数或有两个参数。一些实现允许main()有更多参数，属于对标准的扩展。  int main(void)是标准ANSI C定义main()的一部分。      注释  C语言中被/* */两个符号扩起来的部分是程序的注释。  /* 这是一条C注释 */ /* 也可以这样写C注释 */  C99中新增了//风格的注释。这种风格的注释只能写成一行。  花括号、函数体和块  花括号用于把函数中的多条语句合并为一个单元或块。C函数使用花括号标记函数体的开始和结束。  声明  标识符是变量、函数或其他实体的名称。 声明是C语言最重要的特性之一。声明完成了两件事：  将特定标识符与计算机内存中的特定位置联系起来。 确定存储在特定位置的数据类型。   编译器使用上述信息为标识符在内存中分配存储空间。 分号在C语言中是大部分语句和声明的一部分，不只是语句间的分隔符。 C语言中，所有变量都必须先声明才能使用，这意味着必须列出程序中用到的所有变量名及其类型。 以前的C语言要求把变量声明在块的顶部，任何其他语句不能出现在声明之前。 C99和C11遵循 C++ 的惯例，允许将声明放在块中的任何位置，但首次使用变量前需要先进行声明。  赋值  C语言通过赋值运算符完成赋值操作。 C语言的赋值操作是一种赋值表达式语句。  return语句  C语言中return语句是一种跳转语句。 int main(void)中的int表明main()函数应返回一个整数。这是C标准要求之一。 return语句在UNIX、Linux等操作系统中有实际用途。  提高程序可读性  选择有意义的函数名。 适当地添加注释。 在函数中用空行分隔概念上的多个部分。 每条语句各占一行。  函数原型  C90标准新增了函数原型。 函数原型是一种声明形式，告知编译器正在使用某函数。 C的惯例是将main()放在开头，它提供了程序的基本框架。 C标准建议为程序中用到的所有函数提供函数原型。  标准include文件为标准库函数提供了函数原型。    调试程序 语法错误  语法是一套规则，用于管理语言中各有效语句组合在一起的方式。 不遵循C语法规则会导致语法错误。  语义错误  语义是语句要表达的意思。 语义错误表现的程序的行为中。检查语义错误要跟踪程序状态。  程序状态  程序状态是在程序的执行过程中，某给定点上所有变量值的集合，是计算机当前状态的一个快照。  错误与警告  如果输入程序时打错，编译器会报告语法错误信息。错误信息表明程序中有错，不能进行编译。 编译器有时会给出一些警告。警告表明尽管编写的代码有效，但可能不是程序员想要的。警告并不终止编译。  跟踪程序状态的方法有：</description>
    </item>
    
    <item>
      <title>第1章 初识C语言</title>
      <link>https://qidi.ink/cs/cprimerplus/1-c/</link>
      <pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://qidi.ink/cs/cprimerplus/1-c/</guid>
      <description>C语言的起源  1972年，贝尔实验室的Dennis Ritch和Ken Thompson在开发Unix操作系统时设计了C语言。 C语言基于B语言进行设计。  C语言的特点 设计特性  C语言易于完成自顶向下的规划、结构化编程和模块化设计。 C语言编写的程序更可靠和具有可读性。  高效性  C相对更加紧凑，运行速度很快。 具有通常是汇编语言才具有的微调控制能力，可以根据具体情况微调程序来获得最大运行速度或最有效地使用内存。  可移植性  计算机系统的硬件平台在指令系统和编码格式上有很大差异，同一可执行程序无法在所有平台上运行。 为保证开发的程序能够兼容其他平台，需要针对目标平台，将高级程序设计语言的源代码文件进行修改和再次编译。生成目标系统的适配可执行应用程序。 程序语言的可移植性是指通过编译器，将源代码编译，生成对目标系统的可执行程序。 C在多种软硬件平台上有广泛的支持，C99、C11语言标准也可以很好的向下兼容。C语言具有较好的可移植性。  强大而灵活  UNIX操作系统大部分由C语言编写。 PORTAN、Perl、Python、LISP、Logo、BASIC等语言的许多编译器和解释器由C编写。 C程序可解决物理学和工程学的问题、制作电影动画特效等。  面向程序员  C语言允许程序员访问硬件、操作内存中的位。 C语言具有丰富的运算符，能让程序员简洁的表达意图。  C语言应用范围  C在Linux开发中扮演着重要角色。 C是嵌入式系统开发的流行语言。 C在科学编程领域与FORTAN分得一杯羹。 C++在C的基础上嫁接了面向对象编程工具。  C++几乎是C的超集，任何C程序差不多就是一个 C++ 程序。 面向对象编程通过对语言建模来适应问题，而非对问题建模来适应语言。    计算机工作原理  存储在计算机中的所有内容都是数字。  计算机以数字形式存储数字和字符，每个字符都有一个数字码。 计算机载入寄存器的指令也以数字形式存储，指令集的每条代码都有一个数字码。   计算机程序最终必须以数字指令码表示。 高级语言以抽象方式描述行为，不受限于特定CPU或指令集。 编译器将高级语言程序翻译成计算机能够理解的机器语言指令集。  尽管不同的CPU制造商使用的指令系统和编码格式不同，但可以找到与特定类型CPU匹配的编译器。 通过使用合适的编译器或编译器集，可以把一种高级语言程序转换成供各种不同类型CPU使用的机器语言程序。    语言标准  编写C程序时，若未使用机器特定的编程技术，程序运行情况应与C实现无关。 为此，不同的实现要遵循一个标准。  K&amp;amp;R C  1978年，Brian Kernighan和Dennis Ritchie合著的The C Programming Language第一版是公认的C标准。通常称之为K&amp;amp;R C或经典C。  The C Programming Language附录中的C语言参考手册成为实现C的指导标准。   C语言比其他语言更依赖库，因此需要一个标准库。  The C Programming Language的附录定义了C语言，但没有定义C库。 由于缺乏官方标准，UNIX实现提供的库成为了标准库。    ANSI/ISO C  随着C的不断发展，C社区意识到需要一个更全面、更新颖、更严格的标准。 美国国家标准协会ANSI于1989年公布了ANSI C标准，定义了C语言和C标准库。  ISO于1990年采用了这套C标准。  因此ISO C和ANSI C是完全相同的标准。   ANSI/ISO标准的最终版本通常叫做C89或C90。   由于ANSI先公布C标准，业界人士通常使用ANSI C。 ANSI委员会指定的指导原则中提出要保持C的精神：  信任程序员 不妨碍程序员做需要做的事 保持语言精炼简单 只提供一种方法执行一项操作 让程序运行更快，即使不能保证其可移植性  作为实现，应该针对目标计算机来定义最合适的某特定操作。而不是强加一个抽象、统一的定义。      C99  1994年，ANSI/ISO联合委员会开始修订C标准，并最终发布了C99标准。 C99标准遵循了C90标准的原则，包括保持语言的精炼简单。 委员会用意不在于向C语言中添加新特性，而是为了达到新的目标。  支持国际化编程。如提供多种方法处理国际字符集。 调整现有实践致力于解决明显的缺陷。  如根据现实生活中处理问题的经验，添加将C移至64位处理器的标准。   提高C对科学和工程项目中的关键数值计算的适应性。    C11  标准委员会在2011年发布了C11标准。 出于对编程安全的担忧，不再那么强调“信任程序员”目标。 跟进新技术的需要，如添加可选项支持使用多处理器的计算机。  C语言的编程步骤  定义程序目标  思考程序需要哪些信息，要进行哪些计算和控制，需要报告什么信息。   设计程序　 考虑如何用程序完成目标，如：数据表示和处理方法、用户界面、程序组织方式、目标用户、开发周期等。   编写代码  在编程环境中编写C语言代码。为所编写的程序添加文字注释。   编译、链接  C编译器和链接器把C代码翻译成特定的机器语言。 某些系统中需要分别运行编译和链接程序。另一些系统中，编译器会自动启动链接器，用户只需给出编译命令。   运行程序 测试和调试 维护和修改  注：规划好程序目标和设计框架，有助于编码过程中得心应手、条理清晰。</description>
    </item>
    
  </channel>
</rss>
